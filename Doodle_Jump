from tkinter import *
from math import *
import array
from random import *

root = Tk()

c = Canvas(root, width=600, height=800, bg='white')
width = 600
height = 800
c.pack()
root.geometry('600x800')
g = 10 # ускорение
v_0 = 10  # скорость при отскоке от платформы
Level = 300  # линия, выше которой не поднимается изображени дудла
gen_level = -800 # линия, до которой генерятся платформы
P_Width = 80  # ширина платформы
P_Height = 5  # толщина платформы
platforms = []  # это будет массив платформ
change = False  # переменная отвечает за тип движения обЪектов
start = False # переменная отвечает за начало игры
d_x = 0  # перменные, которые помнят информацию про дудла
d_y = 0
d_vy = 0
# Где-то тут должна быть генерация первых платформ (начальные условия)



def doodle_draw(x, y):
    c.create_oval(x + 20, y - 40, x + 40, y - 20, fill="blue")
    c.create_rectangle(x, y - 20, x + 60, y, fill="green")
    c.create_line(x, y, x, y + 10)
    c.create_line(x + 20, y, x, y + 10)
    c.create_line(x + 40, y, x, y + 10)
    c.create_line(x + 60, y, x, y + 10)


class Doodle():
    def __init__(self):
        self.x = 50
        self.y = 30
        self.vx = 20
        self.vy = 0
        self.g = 10
        self.max_H = self.y - (self.vy ^ 2) / (2 * self.g)
        self.obj = doodle_draw(self.x, self.y)

    def Move_y(self):
        self.y -= self.vy
        d_y = self.y
        self.vy -= self.g
        d_vy = self.vy
        if change == False:
            c.move(self.obj, 0, -self.vy)

    def MoveLeft(self):
        if self.x > 600 :
            self.x -= self.vx + 600
        elif self.x < 0 :
            self.x -= self.vx - 600
        else :
            self.x -= self.vx
        d_x = self.x
        c.move(self.obj, -self.vx, 0)

    def MoveRight(self):
        if self.x > 600:
            self.x += self.vx - 600
        elif self.x < 0:
            self.x += self.vx + 600
        else:
            self.x +1= self.vx
        d_x = self.x
        c.move(self.obj, self.vx, 0)

    def upd(self):
        return False

doodle = Doodle()

def jump_check(obj):
    for p in platforms:
        if obj.vy <= 0 and (obj.x >= p.x and obj.x <= p.x + p.width) and obj.y >= p.y:
            obj.vy = v_0

class Platform():
    def __init__(self):
        self.width = P_Width
        self.height = P_Height
        self.x = -10
        self.y = -10
        self.vx = 0
        self.vy = 0
        self.type = 1
        self.life = 1
        if self.type == 1:
            self.color = "green"
        elif self.type == 2:
            self.color = "blue"
        elif self.type == 3:
            self.color = "red"
        self.obj = c.create_rectangle(self.x, self.y, self.x + self.width, self.y + self.height, fill=self.color)

    def Move(self):
        if self.x + self.width >= 600 and self.vx > 0:
            self.vx = -self.vx
            self.x = 599
        if self.x <= 0 and self.vx < 0:
            self.vx = -self.vx
            self.x = 1



def scr_upd() :
    if

def start_game(event):
    global start
    if not start :
        c.delete(ALL)
        plat_gen_0() # функция, которая генерит платформы в начале
        plat_gen() # функция, которая генерит платформы
        jump_check(doodle)
        c.bind('<A>', doodle.MoveLeft())
        c.bind('<B>', doodle.MoveRight())
        scr_upd() # функция, которая занимается движением всего на экране
        start = True

def change_check() : #функция, которая проверяет, что должно двигаться : дудл или платформы
    if (d_y >= Level) and (d_vy >= 0) :
        change = True
    else :
        change = False

mainloop()
